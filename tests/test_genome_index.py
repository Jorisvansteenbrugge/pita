import pytest

@pytest.fixture
def index_dir():
    from gimmemotifs.genome_index import GenomeIndex
    test_index_dir = 'tests/data/index/'
    g = GenomeIndex()
    g.create_index('tests/data/genome/', test_index_dir)

    return test_index_dir

@pytest.fixture
def loc_and_seq():
    return ("scaffold_54", 141483, 141492, "+"), "GTCTATGGG"

@pytest.fixture
def collection(index_dir):
    from pita.collection import Collection
    from pita.io import read_bed_transcripts
    mc = Collection(index_dir)

    bed = "tests/data/scaffold_54_genes.bed"
    for tname, source, exons in read_bed_transcripts(open(bed), "test", 0):
        mc.add_transcript("{0}{1}{2}".format("test", ":::", tname), source, exons)
    
    return mc

@pytest.fixture
def seqs():
    seqs = [
"CAGGAAGTCACGGAGCGCGGGATTTTTCAATCAGACTGATGAACAGATGAATACGACGAAGAGCATGGAGGCAATTCTGGAATTTTTTGTGCTGTGTGATCCAAAGAAGCGGCCAGTCAGACTGAACCGGTTGCCTTCTGTACCAAAGGATGCACTGTGTTATTCTGCCCTGCTGCCATCTCCTCTACCATCCCAGCTGTTGATCTTTGGCTTAGGTGACTGGTCAGGGTTATCTGGAGGAAGCACAGTAGAAGTGAAATTGGAAGGAAGTGGAACCAAAGAGCACAGACTGGGAACGCTGACTCCTGAGTCAAGATGCTTCCTGTGGGAATCTGACCAAAACCCCGACACCAGCATAATGTTACAAGAGGGAAAGCTGCATATCTGCATGTCGGTTAAAGGGCAGGTCAATATTAATTCTACTAACAGGAAAAAAGAGCATGGAAAGCGCAAGAGAATTAAAGAGGAAGAGGAAAATGTTTGTCCAAATAGTGGACATGTAAAAGTGCCTGCTCAAAAACAGAAGAACAGTAGTCCTAAGAGTCCAGCACCAGCAAAGCAACTTGCTCATTCTAAGGCCTTTTTAGCAGCACCAGCTGTGCCAACTGCACGCTGGGGTCAAGCGCTCTGTCCTGTCAACTCTGAGACAGTAATCTTGATTGGTGGACAGGGAACACGTATGCAGTTCTGTAAGGATTCCATGTGGAAACTGAATACAGATAGGAGCACATGGACTCCAGCTGAGGCATTGGCAGATGGCCTTTCACCAGAAGCTCGTACTGGGCACACAGCAACCTTCGATCCTGAGAACAACCGTATTTATGTGTTTGGAGGTTCTAAGAACAGAAAATGGTTCAATGATGTACATATTTTGGACATTGAGGCCTGGCGATGGAGGAGCGTGGAAGTAAGTAAACTAAGTAGTTGA",
"CAGGAAGTCACGGAGCGCGGGATTTTTCAATCAGACTGATGAACAGATGAATACGACGAAGAGCATGGAGGCAATTCTGGAATTTTTTGTGCTGTGTGATCCAAAGAAGCGGCCAGTCAGACTGAACCGGTTGCCTTCTGTACCAAAGGATGCACTGTGTTATTCTGCCCTGCTGCCATCTCCTCTACCATCCCAGCTGTTGATCTTTGGCTTAGGTGACTGGTCAGGGTTATCTGGAGGAAGCACAGTAGAAGTGAAATTGGAAGGAAGTGGAACCAAAGAGCACAGACTGGGAACGCTGACTCCTGAGTCAAGATGCTTCCTGTGGGAATCTGACCAAAACCCCGACACCAGCATAATGTTACAAGAGGGAAAGCTGCATATCTGCATGTCGGTTAAAGGGCAGGTCAATATTAATTCTACTAACAGGAAAAAAGAGCATGGAAAGCGCAAGAGAATTAAAGAGGAAGAGGAAAATGTTTGTCCAAATAGTGGACATGTAAAAGTGCCTGCTCAAAAACAGAAGAACAGTAGTCCTAAGAGTCCAGCACCAGCAAAGCAACTTGCTCATTCTAAGGCCTTTTTAGCAGCACCAGCTGTGCCAACTGCACGCTGGGGTCAAGCGCTCTGTCCTGTCAACTCTGAGACAGTAATCTTGATTGGTGGACAGGGAACACGTATGCAGTTCTGTAAGGATTCCATGTGGAAACTGAATACAGATAGGAGCACATGGACTCCAGCTGAGGCATTGGCAGATGGCCTTTCACCAGAAGCTCGTACTGGGCACACAGCAACCTTCGATCCTGAGAACAACCGTATTTATGTGTTTGGAGGTTCTAAGAACAGAAAATGGTTCAATGATGTACATATTTTGGACATTGAGGCCTGGCGATGGAGGAGCGTGGAAGCACAGGGCAAAGTTCCCCCTCTCTCTTATCATACGTGCTCTCTGTTTCGAGGAGAGCTCTTTGTGTTTGGTGGGGTCTTTCCACGTCCTAATCCTGAACCTGATGGCTGCAGCAATTTACTCTACATTTTTGATCCGCAACATGAGATTTGGTACCAGCCTATTGTCCTAGGAAAGACCCCTTCGTCACGCTCAGGGTAAGCAGGAGAGGCATTTAGAGCAGAACAGAGTCTATAATCCTTTGGGAAATGAGTCAGGAGAGCATGTGGTTCATTTTCACAAGTGATGATGCCACCCTTAAATCAATCTGTAACTATAAGTTTTAGAGGAGATGCAAGTGCCTATTTATATTAATAACTAAATCTTTTTTGTGTTTTGTGTATAAAAACATAGTAAGTTAGGTTGAAAAAAAGATGTACGTACTGTTACCCTCCCCCCCCTTTTTTTTTTGTTACCC",
"CAGGAAGTCACGGAGCGCGGGATTTTTCAATCAGACTGATGAACAGATGAATACGACGAAGAGCATGGAGGCAATTCTGGAATTTTTTGTGCTGTGTGATCCAAAGAAGCGGCCAGTCAGACTGAACCGGTTGCCTTCTGTACCAAAGGATGCACTGTGTTATTCTGCCCTGCTGCCATCTCCTCTACCATCCCAGCTGTTGATCTTTGGCTTAGGTGACTGGTCAGGGTTATCTGGAGGAAGCACAGTAGAAGTGAAATTGGAAGGAAGTGGAACCAAAGAGCACAGACTGGGAACGCTGACTCCTGAGTCAAGATGCTTCCTGTGGGAATCTGACCAAAACCCCGACACCAGCATAATGTTACAAGAGGGAAAGCTGCATATCTGCATGTCGGTTAAAGGGCAGGTCAATATTAATTCTACTAACAGGAAAAAAGAGCATGGAAAGCGCAAGAGAATTAAAGAGGAAGAGGAAAATGTTTGTCCAAATAGTGGACATGTAAAAGTGCCTGCTCAAAAACAGAAGAACAGTAGTCCTAAGAGTCCAGCACCAGCAAAGCAACTTGCTCATTCTAAGGCCTTTTTAGCAGCACCAGCTGTGCCAACTGCACGCTGGGGTCAAGCGCTCTGTCCTGTCAACTCTGAGACAGTAATCTTGATTGGTGGACAGGGAACACGTATGCAGTTCTGTAAGGATTCCATGTGGAAACTGAATACAGATAGGAGCACATGGACTCCAGCTGAGGCATTGGCAGATGGCCTTTCACCAGAAGCTCGTACTGGGCACACAGCAACCTTCGATCCTGAGAACAACCGTATTTATGTGTTTGGAGGTTCTAAGAACAGAAAATGGTTCAATGATGTACATATTTTGGACATTGAGGCCTGGCGATGGAGGAGCGTGGAAGCACAGGGCAAAGTTCCCCCTCTCTCTTATCATACGTGCTCTCTGTTTCGAGGAGAGCTCTTTGTGTTTGGTGGGGTCTTTCCACGTCCTAATCCTGAACCTGATGGCTGCAGCAATTTACTCTACATTTTTGATCCGCAACATGAGATTTGGTACCAGCCTATTGTCCTAGGAAAGACCCCTTCGTCACGCTCAGGGCACTCTGCCTGTCTGTTAAACAGAGAGCTGTATGTTTTTGGTGGATGGGATACTCCTGTTTGTTACAATGACCTCTACGTACTGGATCTGGGACTCATGGAGTTCTCTCTTGTTGAGGTCACAGGATCCTCACCCTCTCCTCGTTGCTGGCATTCTGCTGCCCCTGTGTCAGATTTCCAGTTCTTGATTCACGGAGGTTATGATGGAAACCAGGCTCTGAGTGACACCTACCTATTCAACACTGGAGCCCCTCTGCCACTGGCCAGAATCCACAGATCCAGTCCAGGCCTGCACTAACAGATTTTGGAGTACACCATACTGGGAACACTCCTCGCTACTACCGAAGGCCACACATTCTACATCAGCTGGAAGGGACTGTGCAGCAGGATCCAAGACTGTTGTTTTTTATTTAAAAACAATATGCATGGTTAAGAGCATTACTTTAGGTCAAAATGTTACCTGGTATAAATTGGCCTATCCTAACCAATTTGTTTTGTGTAACCAAAGCATATGATTAGGCGTATCCCTAACTTGTCT"
    ]

    return seqs

def test_genome_index(index_dir, loc_and_seq):
    from gimmemotifs.genome_index import GenomeIndex
    g = GenomeIndex(index_dir)
    
    loc, seq = loc_and_seq
    
    assert seq == g.get_sequence(*loc)

def test_get_transcript_sequence(collection, seqs):
    from pita.util import exons_to_seq

    for cluster in collection.get_connected_models():
        models = sorted(cluster, cmp=lambda x,y: cmp(len(x), len(y)))
        seqs = sorted(seqs, cmp=lambda x,y: cmp(len(x), len(y)))
        for model, seq in zip(models, seqs):
            for exon in model:
                print "{0}\t{1}\t{2}".format(exon.chrom, exon.start, exon.end)
            #print len(exons_to_seq(model))
            assert seq.upper() == exons_to_seq(model).upper()
    
    

