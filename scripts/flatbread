#!/usr/bin/env python
# Create test set for use with pita
import os
import sys
import yaml
import argparse
import pybedtools
import subprocess as sp
from tempfile import NamedTemporaryFile

p = argparse.ArgumentParser()
p.add_argument("-c",
               dest= "configfile",
               help="Input configuration file"
              )
p.add_argument("-b",
               dest= "bedfile",
               help="BED file with regions",
              )
p.add_argument("-o",
               dest= "output",
               help="Output name"
              )

args = p.parse_args()
configfile = args.configfile
bedfile = args.bedfile
outname = args.output

if not (configfile and bedfile and outname):
    p.print_help()
    sys.exit()

# Parse YAML config file
f = open(configfile, "r")
config = yaml.load(f)

# Data directory
base = "."
if config.has_key("data_path"):
    base = config["data_path"]

# Output data directoy
if not os.path.exists(outname):
    os.mkdir(outname)
else:
    print("Output path {0} already exists!".format(outname))
    sys.exit(1)

# Get chromosomes from BED file
chroms = {}
a = pybedtools.BedTool(bedfile)
for f in a:
    chroms[f[0]] = 1
config["chromosomes"] = chroms.keys()

# Do all intersections with BED file
for f in config["annotation"]:
    path = f['path']
    sys.stderr.write("Filtering {0}\n".format(path))
    if not os.path.exists(path):
        path = os.path.join(base, path)
    if not os.path.exists(path):
        print("File not found: {0}".format(path))
        sys.exit(1)
    a = pybedtools.BedTool(path)
    b = pybedtools.BedTool(bedfile)
    a.intersect(b, wa=True).saveas(os.path.join(outname, os.path.basename(path)))
    f['path'] = os.path.basename(path)

for f in config['data']:
    for p in f['path']:
        if not os.path.exists(p):
            p = os.path.join(base, p)
        out = os.path.join(outname, os.path.basename(p))
        sys.stderr.write("Filtering {0}\n".format(p)) 

        if p.endswith("bam"):
            tmp = NamedTemporaryFile(prefix="pita.flatbread.")
            cmd = "samtools view -H {0} > {1}".format(p, tmp.name)
            sp.call(cmd, shell=True) 
            for line in open(bedfile):
                vals = line.strip().split()
                loc = "{0}:{1}-{2}".format(vals[0], vals[1], vals[2])
                cmd = "samtools view {0} {1} >> {2}".format(p, loc, tmp.name)
                sp.call(cmd, shell=True) 
            cmd = "samtools view -bS {0} > {1} && samtools index {1}"
            sp.call(cmd.format(tmp.name, out), shell=True)
            tmp.close()
        else:
            a = pybedtools.BedTool(p)
            b = pybedtools.BedTool(bedfile)
            a.intersect(b, wa=True).saveas(out)

config["data_path"] = os.path.abspath(outname)

with open("{0}.yaml".format(outname), "w") as f:
    f.write(yaml.dump(config))
